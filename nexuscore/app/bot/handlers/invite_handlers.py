import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state.state import State, StatesGroup
from aiogram.utils.markdown import hbold, hcode

from app.bot.keyboards.invite_keyboards import (
    get_invite_menu_keyboard,
    get_invite_source_keyboard,
    get_invite_target_keyboard,
    get_invite_options_keyboard,
    get_back_to_invite_keyboard
)
from app.bot.utils.api_client import api_client
from app.database.models import TaskStatus

# Configure logging
logger = logging.getLogger(__name__)

# Router
router = Router()

# States
class InviteStates(StatesGroup):
    selecting_source = State()
    entering_source = State()
    entering_target = State()
    selecting_options = State()
    confirmation = State()

# Command handler
@router.message(Command("invite"))
async def cmd_invite(message: types.Message):
    """Handle /invite command"""
    await show_invite_menu(message)

# Callback handler for opening invite menu
@router.callback_query(F.data == "open_invite_menu")
async def open_invite_menu_callback(callback: types.CallbackQuery):
    """Handle callback to open invite menu"""
    await show_invite_menu(callback.message)
    await callback.answer()

async def show_invite_menu(message: types.Message):
    """Show invite menu with options"""
    menu_text = (
        f"‚ûï {hbold('–ú–µ–Ω—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        f"–° –ø–æ–º–æ—â—å—é –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã, "
        f"–∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–∏—Ö –±–∞–∑ –∏–ª–∏ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
        f"–î–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç."
    )
    
    await message.answer(menu_text, reply_markup=get_invite_menu_keyboard())

# Start new invite process
@router.callback_query(F.data == "start_new_invite")
async def start_new_invite(callback: types.CallbackQuery, state: FSMContext):
    """Handle callback to start new invite process"""
    user_id = callback.from_user.id
    
    try:
        # Check if user has active accounts
        response = await api_client.get(f"/api/accounts?user_id={user_id}&active_only=true")
        accounts = response.json()
        
        if not accounts:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.",
                reply_markup=get_back_to_invite_keyboard()
            )
            await callback.answer()
            return
            
        # Show source selection
        await callback.message.edit_text(
            f"üìã {hbold('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:')}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫.",
            reply_markup=get_invite_source_keyboard()
        )
        
        # Save account IDs for later use
        account_ids = [account["id"] for account in accounts]
        await state.update_data(account_ids=account_ids)
        await state.set_state(InviteStates.selecting_source)
        
    except Exception as e:
        logger.error(f"Error in start_new_invite: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_invite_keyboard()
        )
    
    await callback.answer()

# Source selection handler
@router.callback_query(InviteStates.selecting_source, F.data.startswith("invite_source:"))
async def invite_source_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle selection of invite source"""
    source_type = callback.data.split(":")[1]
    
    # Validate source type
    if source_type not in ["database", "external"]:
        await callback.message.edit_text(
            "‚ùå –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_invite_source_keyboard()
        )
        await callback.answer()
        return
    
    # Save source type
    await state.update_data(source_type=source_type)
    
    if source_type == "database":
        # Show available databases
        try:
            user_id = callback.from_user.id
            response = await api_client.get(
                "/api/tasks", 
                params={"user_id": user_id, "status": "completed", "task_type": "parse_members"}
            )
            tasks = response.json()
            
            if tasks:
                # Create keyboard with databases
                keyboard = []
                
                for task in tasks:
                    target = task["params"].get("target", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    keyboard.append([
                        types.InlineKeyboardButton(
                            text=f"{target} ({task['total_items']} –∑–∞–ø–∏—Å–µ–π)",
                            callback_data=f"invite_db_source:{task['id']}"
                        )
                    ])
                
                # Add cancel button
                keyboard.append([
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_invite")
                ])
                
                await callback.message.edit_text(
                    f"üìä {hbold('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:')}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å:",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
                    reply_markup=get_back_to_invite_keyboard()
                )
        except Exception as e:
            logger.error(f"Error getting databases: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_invite_keyboard()
            )
    else:
        # Ask for external source
        await callback.message.edit_text(
            f"üìù {hbold('–£–∫–∞–∂–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ (–ø–æ –æ–¥–Ω–æ–º—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–æ–∫—É).\n"
            f"–ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å @username –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_invite_target_keyboard()
        )
        await state.set_state(InviteStates.entering_source)
    
    await callback.answer()

# Database source selection handler
@router.callback_query(F.data.startswith("invite_db_source:"))
async def invite_db_source_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle selection of database source"""
    db_id = int(callback.data.split(":")[1])
    
    # Save database ID
    await state.update_data(source_db_id=db_id)
    
    # Ask for target
    await callback.message.edit_text(
        f"üéØ {hbold('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞')}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=get_invite_target_keyboard()
    )
    
    await state.set_state(InviteStates.entering_target)
    await callback.answer()

# External source input handler
@router.message(InviteStates.entering_source)
async def invite_external_source_input(message: types.Message, state: FSMContext):
    """Handle input of external invite source"""
    source = message.text.strip()
    
    # Basic validation
    if not source or len(source) < 3:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            reply_markup=get_invite_target_keyboard()
        )
        return
    
    # Parse usernames
    usernames = [line.strip() for line in source.split("\n") if line.strip()]
    
    # Validate usernames
    if not usernames:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            reply_markup=get_invite_target_keyboard()
        )
        return
    
    # Save usernames
    await state.update_data(usernames=usernames)
    
    # Ask for target
    await message.answer(
        f"üéØ {hbold('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞')}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=get_invite_target_keyboard()
    )
    
    await state.set_state(InviteStates.entering_target)

# Target input handler
@router.message(InviteStates.entering_target)
async def invite_target_input(message: types.Message, state: FSMContext):
    """Handle input of invite target"""
    target = message.text.strip()
    
    # Basic validation
    if not target or (not target.startswith("@") and not target.startswith("https://t.me/")):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–ª–∏. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª:",
            reply_markup=get_invite_target_keyboard()
        )
        return
    
    # Save target
    await state.update_data(target=target)
    
    # Show options
    await message.answer(
        f"‚öôÔ∏è {hbold('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞')}\n\n"
        f"–¶–µ–ª—å: {hcode(target)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:",
        reply_markup=get_invite_options_keyboard()
    )
    
    await state.set_state(InviteStates.selecting_options)

# Options selection handler
@router.callback_query(InviteStates.selecting_options, F.data.startswith("invite_options:"))
async def invite_options_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle selection of invite options"""
    options = callback.data.split(":")[1].split(",")
    
    # Parse options
    delay_min = int(options[0])
    delay_max = int(options[1])
    limit_per_account = int(options[2])
    
    # Save options
    await state.update_data(
        delay_min=delay_min,
        delay_max=delay_max,
        limit_per_account=limit_per_account
    )
    
    # Get all data for confirmation
    user_data = await state.get_data()
    target = user_data.get("target")
    
    # Format source for display
    if user_data.get("source_type") == "database":
        source_text = f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (ID: {user_data.get('source_db_id')})"
    else:
        usernames = user_data.get("usernames", [])
        count = len(usernames)
        source_text = f"–í–Ω–µ—à–Ω–∏–π —Å–ø–∏—Å–æ–∫ ({count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
    
    # Show confirmation
    confirmation_text = (
        f"‚úÖ {hbold('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞')}\n\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source_text}\n"
        f"–¶–µ–ª—å: {hcode(target)}\n"
        f"–ó–∞–¥–µ—Ä–∂–∫–∞: {delay_min}-{delay_max} —Å–µ–∫.\n"
        f"–õ–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {limit_per_account}\n\n"
        f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥?"
    )
    
    # Create confirmation keyboard
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="confirm_invite"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_invite")
        ]
    ])
    
    await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
    await state.set_state(InviteStates.confirmation)
    await callback.answer()

# Confirmation handler
@router.callback_query(InviteStates.confirmation, F.data == "confirm_invite")
async def confirm_invite(callback: types.CallbackQuery, state: FSMContext):
    """Handle invite confirmation and start invite"""
    user_id = callback.from_user.id
    user_data = await state.get_data()
    
    try:
        # Prepare task data
        task_data = {
            "user_id": user_id,
            "task_type": "invite_users",
            "params": {
                "target": user_data.get("target"),
                "delay_min": user_data.get("delay_min", 30),
                "delay_max": user_data.get("delay_max", 60),
                "limit_per_account": user_data.get("limit_per_account", 50),
                "account_ids": user_data.get("account_ids", [])
            }
        }
        
        # Add source-specific parameters
        if user_data.get("source_type") == "database":
            task_data["params"]["source_db_id"] = user_data.get("source_db_id")
        else:
            task_data["params"]["usernames"] = user_data.get("usernames", [])
        
        # Create task
        response = await api_client.post("/api/tasks", json=task_data)
        
        if response.status_code == 201:
            task = response.json()
            task_id = task["id"]
            
            await callback.message.edit_text(
                f"‚úÖ {hbold('–ó–∞–¥–∞—á–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞!')}\n\n"
                f"ID –∑–∞–¥–∞—á–∏: {hcode(str(task_id))}\n"
                f"–°—Ç–∞—Ç—É—Å: {task['status']}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏'.",
                reply_markup=get_back_to_invite_keyboard()
            )
        else:
            error_data = response.json()
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=get_back_to_invite_keyboard()
            )
    except Exception as e:
        logger.error(f"Error creating invite task: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_invite_keyboard()
        )
    
    # Clear state
    await state.clear()
    await callback.answer()

# Cancel invite
@router.callback_query(F.data == "cancel_invite")
async def cancel_invite(callback: types.CallbackQuery, state: FSMContext):
    """Cancel invite process"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_back_to_invite_keyboard()
    )
    await callback.answer()

# View active invite tasks
@router.callback_query(F.data == "view_active_invites")
async def view_active_invites(callback: types.CallbackQuery):
    """View active invite tasks"""
    user_id = callback.from_user.id
    
    try:
        # Get active invite tasks
        response = await api_client.get(
            "/api/tasks", 
            params={"user_id": user_id, "status": "running", "task_type": "invite_users"}
        )
        tasks = response.json()
        
        if tasks:
            tasks_text = f"üìä {hbold('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:')}\n\n"
            
            for task in tasks:
                target = task["params"].get("target", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                tasks_text += (
                    f"ID: {hcode(str(task['id']))}\n"
                    f"–¶–µ–ª—å: {target}\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {task['progress']}%\n"
                    f"–°–æ–∑–¥–∞–Ω–∞: {task['created_at']}\n\n"
                )
                
                if len(tasks_text) > 3500:  # Telegram message limit
                    tasks_text += "... –∏ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏"
                    break
            
            # Add button to cancel tasks
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="select_invite_to_cancel")
                ],
                [
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_invite_menu")
                ]
            ])
            
            await callback.message.edit_text(tasks_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "üìä –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.",
                reply_markup=get_back_to_invite_keyboard()
            )
    except Exception as e:
        logger.error(f"Error viewing active invite tasks: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_invite_keyboard()
        )
    
    await callback.answer()

# Back to invite menu
@router.callback_query(F.data == "back_to_invite_menu")
async def back_to_invite_menu(callback: types.CallbackQuery, state: FSMContext = None):
    """Return to invite menu"""
    if state:
        await state.clear()
    
    await show_invite_menu(callback.message)
    await callback.answer()