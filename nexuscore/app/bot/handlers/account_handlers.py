import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state.state import State, StatesGroup
from aiogram.utils.markdown import hbold, hcode

from app.bot.keyboards.account_keyboards import (
    get_accounts_menu_keyboard,
    get_account_detail_keyboard,
    get_add_account_cancel_keyboard,
    get_back_to_accounts_keyboard
)
from app.bot.utils.api_client import api_client
from app.database.models import AccountStatus

# Configure logging
logger = logging.getLogger(__name__)

# Router
router = Router()

# States
class AddAccountStates(StatesGroup):
    phone = State()
    api_id = State()
    api_hash = State()
    confirmation = State()

# Command handler
@router.message(Command("accounts"))
async def cmd_accounts(message: types.Message):
    """Handle /accounts command"""
    await show_accounts_menu(message)

# Callback handler for accounts menu button
@router.callback_query(F.data == "open_accounts_menu")
async def accounts_menu_callback(callback: types.CallbackQuery):
    """Handle callback from main menu to accounts menu"""
    await show_accounts_menu(callback.message)
    await callback.answer()

async def show_accounts_menu(message: types.Message):
    """Show accounts menu with list of accounts"""
    user_id = message.from_user.id
    
    try:
        # Get accounts from API
        response = await api_client.get(f"/api/accounts?user_id={user_id}")
        accounts = response.json()
        
        if accounts:
            # Format accounts list
            accounts_text = (
                f"üë§ {hbold('–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:')}\n\n"
            )
            
            for idx, account in enumerate(accounts, 1):
                status_emoji = {
                    "active": "‚úÖ",
                    "cooling_down": "‚è≥",
                    "banned": "üö´",
                    "needs_verification": "‚ö†Ô∏è",
                    "limited": "‚ö†Ô∏è",
                    "inactive": "‚ùå"
                }.get(account["status"], "‚ùì")
                
                accounts_text += (
                    f"{idx}. {status_emoji} {hcode(account['phone'])}\n"
                )
            
            await message.answer(
                accounts_text,
                reply_markup=get_accounts_menu_keyboard(accounts)
            )
        else:
            await message.answer(
                "üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
                reply_markup=get_accounts_menu_keyboard([])
            )
    except Exception as e:
        logger.error(f"Error retrieving accounts: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_accounts_keyboard()
        )

# Account details handler
@router.callback_query(F.data.startswith("account_details:"))
async def account_details_callback(callback: types.CallbackQuery):
    """Handle callback to show account details"""
    account_id = int(callback.data.split(":")[1])
    
    try:
        # Get account details from API
        response = await api_client.get(f"/api/accounts/{account_id}")
        account = response.json()
        
        # Get status emoji
        status_emoji = {
            "active": "‚úÖ",
            "cooling_down": "‚è≥",
            "banned": "üö´",
            "needs_verification": "‚ö†Ô∏è",
            "limited": "‚ö†Ô∏è",
            "inactive": "‚ùå"
        }.get(account["status"], "‚ùì")
        
        # Format account details
        cooldown_text = ""
        if account["status"] == "cooling_down" and account["cooldown_until"]:
            cooldown_text = f"\n‚è≥ –í –æ—Ç–ª–µ–∂–∫–µ –¥–æ: {account['cooldown_until']}"
        
        usage_text = (
            f"üìä {hbold('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:')}\n"
            f"- –ü–∞—Ä—Å–∏–Ω–≥: {account['daily_parse_count']}\n"
            f"- –ò–Ω–≤–∞–π—Ç–∏–Ω–≥: {account['daily_invite_count']}\n"
            f"- –õ–∞–π–∫–∏–Ω–≥: {account['daily_like_count']}"
        )
        
        account_text = (
            f"üì± {hbold('–ê–∫–∫–∞—É–Ω—Ç:')} {hcode(account['phone'])}\n"
            f"üîë API ID: {hcode(account['api_id'])}\n"
            f"üì∂ –°—Ç–∞—Ç—É—Å: {status_emoji} {account['status'].upper()}"
            f"{cooldown_text}\n\n"
            f"{usage_text}"
        )
        
        await callback.message.edit_text(
            account_text,
            reply_markup=get_account_detail_keyboard(account_id)
        )
    except Exception as e:
        logger.error(f"Error retrieving account details: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.",
            reply_markup=get_back_to_accounts_keyboard()
        )
    
    await callback.answer()

# Add account handler
@router.callback_query(F.data == "add_account")
async def add_account_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle callback to add a new account"""
    await callback.message.edit_text(
        "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):",
        reply_markup=get_add_account_cancel_keyboard()
    )
    await state.set_state(AddAccountStates.phone)
    await callback.answer()

# Phone number handler
@router.message(AddAccountStates.phone)
async def process_phone(message: types.Message, state: FSMContext):
    """Handle phone number input"""
    phone = message.text.strip()
    
    # Basic validation
    if not phone.startswith("+") or not phone[1:].isdigit():
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):",
            reply_markup=get_add_account_cancel_keyboard()
        )
        return
    
    await state.update_data(phone=phone)
    await message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ API ID –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ my.telegram.org):",
        reply_markup=get_add_account_cancel_keyboard()
    )
    await state.set_state(AddAccountStates.api_id)

# API ID handler
@router.message(AddAccountStates.api_id)
async def process_api_id(message: types.Message, state: FSMContext):
    """Handle API ID input"""
    api_id = message.text.strip()
    
    # Basic validation
    if not api_id.isdigit():
        await message.answer(
            "‚ùå API ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_add_account_cancel_keyboard()
        )
        return
    
    await state.update_data(api_id=api_id)
    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ API Hash –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ my.telegram.org):",
        reply_markup=get_add_account_cancel_keyboard()
    )
    await state.set_state(AddAccountStates.api_hash)

# API Hash handler
@router.message(AddAccountStates.api_hash)
async def process_api_hash(message: types.Message, state: FSMContext):
    """Handle API Hash input"""
    api_hash = message.text.strip()
    
    # Basic validation (API hash is 32 hex characters)
    if len(api_hash) != 32 or not all(c in "0123456789abcdefABCDEF" for c in api_hash):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API Hash. API Hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32-—Å–∏–º–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_add_account_cancel_keyboard()
        )
        return
    
    # Get all data
    user_data = await state.update_data(api_hash=api_hash)
    
    # Show confirmation message
    confirmation_text = (
        f"üì± {hbold('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:')}\n\n"
        f"–ù–æ–º–µ—Ä: {hcode(user_data['phone'])}\n"
        f"API ID: {hcode(user_data['api_id'])}\n"
        f"API Hash: {hcode(user_data['api_hash'][:5] + '...' + user_data['api_hash'][-5:])}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞?"
    )
    
    # Create confirmation keyboard
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add_account"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add_account")
        ]
    ])
    
    await message.answer(confirmation_text, reply_markup=keyboard)
    await state.set_state(AddAccountStates.confirmation)

# Confirmation handler
@router.callback_query(AddAccountStates.confirmation, F.data == "confirm_add_account")
async def confirm_add_account(callback: types.CallbackQuery, state: FSMContext):
    """Handle account addition confirmation"""
    user_data = await state.get_data()
    user_id = callback.from_user.id
    
    try:
        # Send data to API
        account_data = {
            "user_id": user_id,
            "phone": user_data["phone"],
            "api_id": user_data["api_id"],
            "api_hash": user_data["api_hash"]
        }
        
        response = await api_client.post("/api/accounts", json=account_data)
        
        if response.status_code == 201:
            await callback.message.edit_text(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.",
                reply_markup=get_back_to_accounts_keyboard()
            )
        else:
            error_data = response.json()
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=get_back_to_accounts_keyboard()
            )
    except Exception as e:
        logger.error(f"Error adding account: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_accounts_keyboard()
        )
    
    # Clear state
    await state.clear()
    await callback.answer()

# Cancel account addition
@router.callback_query(F.data == "cancel_add_account")
async def cancel_add_account(callback: types.CallbackQuery, state: FSMContext):
    """Cancel account addition process"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_back_to_accounts_keyboard()
    )
    await callback.answer()

# Check account health
@router.callback_query(F.data.startswith("check_account:"))
async def check_account_health(callback: types.CallbackQuery):
    """Check account health and status"""
    account_id = int(callback.data.split(":")[1])
    
    try:
        # Show loading message
        await callback.message.edit_text(
            "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞...",
            reply_markup=None
        )
        
        # Call API to check account health
        response = await api_client.post(f"/api/accounts/{account_id}/check")
        health_data = response.json()
        
        # Format status message
        status_emoji = {
            "active": "‚úÖ",
            "cooling_down": "‚è≥",
            "banned": "üö´",
            "needs_verification": "‚ö†Ô∏è",
            "limited": "‚ö†Ô∏è",
            "inactive": "‚ùå"
        }.get(health_data["status"], "‚ùì")
        
        status_text = (
            f"üì± {hbold('–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:')}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_emoji} {health_data['status'].upper()}\n"
            f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if health_data['is_connected'] else '‚ùå –û—à–∏–±–∫–∞'}\n"
            f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if health_data['is_authorized'] else '‚ùå –û—à–∏–±–∫–∞'}\n"
            f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {'‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã' if health_data['has_restrictions'] else '‚úÖ –ù–µ—Ç'}\n"
        )
        
        if health_data["details"]:
            status_text += f"\n‚ÑπÔ∏è {hbold('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:')} {health_data['details']}"
        
        await callback.message.edit_text(
            status_text,
            reply_markup=get_account_detail_keyboard(account_id)
        )
    except Exception as e:
        logger.error(f"Error checking account health: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.",
            reply_markup=get_account_detail_keyboard(account_id)
        )
    
    await callback.answer()

# Reset account limits
@router.callback_query(F.data.startswith("reset_account:"))
async def reset_account_limits(callback: types.CallbackQuery):
    """Reset account usage limits"""
    account_id = int(callback.data.split(":")[1])
    
    try:
        # Call API to reset account limits
        response = await api_client.post(f"/api/accounts/{account_id}/reset")
        
        if response.status_code == 200:
            await callback.message.edit_text(
                "‚úÖ –õ–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.",
                reply_markup=get_account_detail_keyboard(account_id)
            )
        else:
            error_data = response.json()
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=get_account_detail_keyboard(account_id)
            )
    except Exception as e:
        logger.error(f"Error resetting account limits: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞.",
            reply_markup=get_account_detail_keyboard(account_id)
        )
    
    await callback.answer()

# Delete account handler
@router.callback_query(F.data.startswith("delete_account:"))
async def delete_account_callback(callback: types.CallbackQuery):
    """Handle account deletion"""
    account_id = int(callback.data.split(":")[1])
    
    # Create confirmation keyboard
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_account:{account_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"account_details:{account_id}")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard
    )
    await callback.answer()

# Confirm delete account
@router.callback_query(F.data.startswith("confirm_delete_account:"))
async def confirm_delete_account(callback: types.CallbackQuery):
    """Confirm and process account deletion"""
    account_id = int(callback.data.split(":")[1])
    
    try:
        # Call API to delete account
        response = await api_client.delete(f"/api/accounts/{account_id}")
        
        if response.status_code == 204:
            await callback.message.edit_text(
                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                reply_markup=get_back_to_accounts_keyboard()
            )
        else:
            error_data = response.json()
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=get_account_detail_keyboard(account_id)
            )
    except Exception as e:
        logger.error(f"Error deleting account: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.",
            reply_markup=get_account_detail_keyboard(account_id)
        )
    
    await callback.answer()

# Back to accounts menu
@router.callback_query(F.data == "back_to_accounts")
async def back_to_accounts(callback: types.CallbackQuery):
    """Return to accounts menu"""
    await show_accounts_menu(callback.message)
    await callback.answer()