version: '3.8'

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: nexuscore
      POSTGRES_USER: nexususer
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "nexususer", "-d", "nexuscore"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../
      dockerfile: docker/Dockerfile.api
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://nexususer:${DB_PASSWORD}@postgres/nexuscore
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ../app:/app
      - ../sessions:/app/sessions
      - ../results:/app/results

  worker:
    build:
      context: ../
      dockerfile: docker/Dockerfile.worker
    depends_on:
      - redis
      - postgres
    environment:
      - DATABASE_URL=postgresql://nexususer:${DB_PASSWORD}@postgres/nexuscore
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped
    volumes:
      - ../app:/app
      - ../sessions:/app/sessions
      - ../results:/app/results
    deploy:
      replicas: 3

  bot:
    build:
      context: ../
      dockerfile: docker/Dockerfile.bot
    depends_on:
      - api
    environment:
      - API_URL=http://api:8000
      - BOT_TOKEN=${BOT_TOKEN}
    restart: unless-stopped
    volumes:
      - ../app:/app

  prometheus:
    image: prom/prometheus
    volumes:
      - ../prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: