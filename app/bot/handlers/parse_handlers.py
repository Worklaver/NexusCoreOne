import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state.state import State, StatesGroup
from aiogram.utils.markdown import hbold, hcode

from app.bot.keyboards.parse_keyboards import (
    get_parse_menu_keyboard,
    get_parse_type_keyboard,
    get_parse_target_keyboard,
    get_parse_options_keyboard,
    get_back_to_parse_keyboard
)
from app.bot.utils.api_client import api_client
from app.database.models import TaskStatus, TaskType

# Configure logging
logger = logging.getLogger(__name__)

# Router
router = Router()

# States for parse flow
class ParseStates(StatesGroup):
    selecting_type = State()
    entering_target = State()
    selecting_options = State()
    confirmation = State()

# Command handler for parse menu
@router.message(Command("parse"))
async def cmd_parse(message: types.Message):
    """Handle /parse command"""
    await show_parse_menu(message)

# Callback handler for opening parse menu
@router.callback_query(F.data == "open_parse_menu")
async def open_parse_menu_callback(callback: types.CallbackQuery):
    """Handle callback to open parse menu"""
    await show_parse_menu(callback.message)
    await callback.answer()

async def show_parse_menu(message: types.Message):
    """Show parse menu with options"""
    menu_text = (
        f"üîç {hbold('–ú–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram.\n\n"
        f"–° –ø–æ–º–æ—â—å—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å:\n"
        f"- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤\n"
        f"- –ê–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö\n"
        f"- –ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏\n\n"
        f"–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç."
    )
    
    await message.answer(menu_text, reply_markup=get_parse_menu_keyboard())

# Start new parsing process
@router.callback_query(F.data == "start_new_parsing")
async def start_new_parsing(callback: types.CallbackQuery, state: FSMContext):
    """Handle callback to start new parsing process"""
    user_id = callback.from_user.id
    
    try:
        # Check if user has active accounts
        response = await api_client.get(f"/api/accounts?user_id={user_id}&active_only=true")
        accounts = response.json()
        
        if not accounts:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.",
                reply_markup=get_back_to_parse_keyboard()
            )
            await callback.answer()
            return
        
        # Show parsing types
        await callback.message.edit_text(
            f"üìã {hbold('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞:')}\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ - —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤\n"
            f"‚úçÔ∏è –ê–≤—Ç–æ—Ä—ã - —Å–±–æ—Ä –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã - —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Å—Ç–∞–≤–∏–≤—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏",
            reply_markup=get_parse_type_keyboard()
        )
        
        # Save account IDs for later use
        account_ids = [account["id"] for account in accounts]
        await state.update_data(account_ids=account_ids)
        await state.set_state(ParseStates.selecting_type)
        
    except Exception as e:
        logger.error(f"Error in start_new_parsing: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_parse_keyboard()
        )
    
    await callback.answer()

# Parse type selection handler
@router.callback_query(ParseStates.selecting_type, F.data.startswith("parse_type:"))
async def parse_type_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle selection of parsing type"""
    parse_type = callback.data.split(":")[1]
    
    # Validate parse type
    if parse_type not in ["members", "writers", "commenters"]:
        await callback.message.edit_text(
            "‚ùå –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_parse_type_keyboard()
        )
        await callback.answer()
        return
    
    # Save parse type
    await state.update_data(parse_type=parse_type)
    
    # Ask for target
    target_type = {
        "members": "–≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª",
        "writers": "–∫–∞–Ω–∞–ª",
        "commenters": "–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ"
    }[parse_type]
    
    await callback.message.edit_text(
        f"üéØ {hbold('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ {target_type}, "
        f"–∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=get_parse_target_keyboard()
    )
    
    await state.set_state(ParseStates.entering_target)
    await callback.answer()

# Handle target input
@router.message(ParseStates.entering_target)
async def parse_target_input(message: types.Message, state: FSMContext):
    """Handle input of parsing target"""
    target = message.text.strip()
    
    # Basic validation
    if not target or (not target.startswith("@") and not target.startswith("https://t.me/")):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–ª–∏. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª/–ø–æ—Å—Ç:",
            reply_markup=get_parse_target_keyboard()
        )
        return
    
    # Save target
    await state.update_data(target=target)
    
    # Get parse type
    user_data = await state.get_data()
    parse_type = user_data.get("parse_type")
    
    # Show options
    await message.answer(
        f"‚öôÔ∏è {hbold('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞')}\n\n"
        f"–¶–µ–ª—å: {hcode(target)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:",
        reply_markup=get_parse_options_keyboard(parse_type)
    )
    
    await state.set_state(ParseStates.selecting_options)

# Handle options selection
@router.callback_query(ParseStates.selecting_options, F.data.startswith("parse_limit:"))
async def parse_options_selection(callback: types.CallbackQuery, state: FSMContext):
    """Handle selection of parsing options"""
    limit = int(callback.data.split(":")[1])
    
    # Save limit
    await state.update_data(limit=limit)
    
    # Get all data
    user_data = await state.get_data()
    parse_type = user_data.get("parse_type")
    target = user_data.get("target")
    
    # Format parse type for display
    parse_type_display = {
        "members": "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        "writers": "–∞–≤—Ç–æ—Ä–æ–≤",
        "commenters": "–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤"
    }[parse_type]
    
    # Show confirmation
    limit_display = "–≤—Å–µ (–º–∞–∫—Å. 10000)" if limit == 0 else str(limit)
    confirmation_text = (
        f"‚úÖ {hbold('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞')}\n\n"
        f"–¢–∏–ø: {parse_type_display}\n"
        f"–¶–µ–ª—å: {hcode(target)}\n"
        f"–õ–∏–º–∏—Ç: {limit_display}\n\n"
        f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥?"
    )
    
    # Create confirmation keyboard
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="confirm_parsing"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_parsing")
        ]
    ])
    
    await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
    await state.set_state(ParseStates.confirmation)
    await callback.answer()

# Handle parsing confirmation
@router.callback_query(ParseStates.confirmation, F.data == "confirm_parsing")
async def confirm_parsing(callback: types.CallbackQuery, state: FSMContext):
    """Handle parsing confirmation and start parsing"""
    user_id = callback.from_user.id
    user_data = await state.get_data()
    
    try:
        # Map parse type to task type
        task_type = {
            "members": "parse_members",
            "writers": "parse_writers",
            "commenters": "parse_commenters"
        }[user_data.get("parse_type")]
        
        # Prepare task data
        task_data = {
            "user_id": user_id,
            "task_type": task_type,
            "params": {
                "target": user_data.get("target"),
                "limit": user_data.get("limit", 0),
                "account_ids": user_data.get("account_ids", [])
            }
        }
        
        # Create task
        response = await api_client.post("/api/tasks", json=task_data)
        
        if response.status_code == 201:
            task = response.json()
            task_id = task["id"]
            
            await callback.message.edit_text(
                f"‚úÖ {hbold('–ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞!')}\n\n"
                f"ID –∑–∞–¥–∞—á–∏: {hcode(str(task_id))}\n"
                f"–°—Ç–∞—Ç—É—Å: {task['status']}\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏'.",
                reply_markup=get_back_to_parse_keyboard()
            )
        else:
            error_data = response.json()
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=get_back_to_parse_keyboard()
            )
    except Exception as e:
        logger.error(f"Error creating parsing task: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_parse_keyboard()
        )
    
    # Clear state
    await state.clear()
    await callback.answer()

# Cancel parsing
@router.callback_query(F.data == "cancel_parsing")
async def cancel_parsing(callback: types.CallbackQuery, state: FSMContext):
    """Cancel parsing process"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_back_to_parse_keyboard()
    )
    await callback.answer()

# View active tasks
@router.callback_query(F.data == "view_active_tasks")
async def view_active_tasks(callback: types.CallbackQuery):
    """View active parsing tasks"""
    user_id = callback.from_user.id
    
    try:
        # Get active tasks
        response = await api_client.get(
            "/api/tasks", 
            params={"user_id": user_id, "status": "running"}
        )
        tasks = response.json()
        
        if tasks:
            tasks_text = f"üìä {hbold('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:')}\n\n"
            
            for task in tasks:
                task_type_display = {
                    "parse_members": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
                    "parse_writers": "–ê–≤—Ç–æ—Ä—ã",
                    "parse_commenters": "–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã"
                }.get(task["task_type"], task["task_type"])
                
                tasks_text += (
                    f"ID: {hcode(str(task['id']))}\n"
                    f"–¢–∏–ø: {task_type_display}\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {task['progress']}%\n"
                    f"–°–æ–∑–¥–∞–Ω–∞: {task['created_at']}\n\n"
                )
                
                if len(tasks_text) > 3500:  # Telegram message limit
                    tasks_text += "... –∏ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏"
                    break
            
            # Add button to cancel tasks
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="select_task_to_cancel")
                ],
                [
                    types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_parse_menu")
                ]
            ])
            
            await callback.message.edit_text(tasks_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "üìä –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞.",
                reply_markup=get_back_to_parse_keyboard()
            )
    except Exception as e:
        logger.error(f"Error viewing active tasks: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_parse_keyboard()
        )
    
    await callback.answer()

# View databases
@router.callback_query(F.data == "my_databases")
async def view_databases(callback: types.CallbackQuery):
    """View parsed databases"""
    user_id = callback.from_user.id
    
    try:
        # Get completed tasks
        response = await api_client.get(
            "/api/tasks", 
            params={"user_id": user_id, "status": "completed"}
        )
        tasks = response.json()
        
        if tasks:
            # Filter parsing tasks only
            parsing_tasks = [
                task for task in tasks 
                if task["task_type"] in ["parse_members", "parse_writers", "parse_commenters"]
            ]
            
            if parsing_tasks:
                databases_text = f"üóÑÔ∏è {hbold('–í–∞—à–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')}\n\n"
                
                for task in parsing_tasks:
                    task_type_display = {
                        "parse_members": "–£—á–∞—Å—Ç–Ω–∏–∫–∏",
                        "parse_writers": "–ê–≤—Ç–æ—Ä—ã",
                        "parse_commenters": "–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã"
                    }.get(task["task_type"], task["task_type"])
                    
                    target = task["params"].get("target", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                    databases_text += (
                        f"ID: {hcode(str(task['id']))}\n"
                        f"–¢–∏–ø: {task_type_display}\n"
                        f"–¶–µ–ª—å: {target}\n"
                        f"–°–æ–±—Ä–∞–Ω–æ: {task['total_items']} –∑–∞–ø–∏—Å–µ–π\n"
                        f"–î–∞—Ç–∞: {task['completed_at']}\n\n"
                    )
                    
                    if len(databases_text) > 3500:  # Telegram message limit
                        databases_text += "... –∏ –¥—Ä—É–≥–∏–µ –±–∞–∑—ã"
                        break
                
                # Add buttons to view details and export
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data="select_database_to_export")
                    ],
                    [
                        types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="select_database_to_delete")
                    ],
                    [
                        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_parse_menu")
                    ]
                ])
                
                await callback.message.edit_text(databases_text, reply_markup=keyboard)
            else:
                await callback.message.edit_text(
                    "üóÑÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞.",
                    reply_markup=get_back_to_parse_keyboard()
                )
        else:
            await callback.message.edit_text(
                "üóÑÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞.",
                reply_markup=get_back_to_parse_keyboard()
            )
    except Exception as e:
        logger.error(f"Error viewing databases: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_parse_keyboard()
        )
    
    await callback.answer()

# Back to parse menu
@router.callback_query(F.data == "back_to_parse_menu")
async def back_to_parse_menu(callback: types.CallbackQuery, state: FSMContext = None):
    """Return to parse menu"""
    if state:
        await state.clear()
    
    await show_parse_menu(callback.message)
    await callback.answer()